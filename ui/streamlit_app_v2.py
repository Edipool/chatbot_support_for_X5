import requests
import streamlit as st
from langchain.schema import ChatMessage
import pandas as pd
import uuid
import time

st.set_page_config(page_title="X6 Bot", page_icon="üîç")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
if "chats" not in st.session_state:
    st.session_state["chats"] = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    st.session_state["archived_chats"] = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    st.session_state["current_chat_id"] = None  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
def create_new_chat():
    chat_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
    st.session_state["chats"][chat_id] = {
        "messages": [
            ChatMessage(
                role="assistant",
                content="–ü—Ä–∏–≤–µ—Ç!‚úåÔ∏è –Ø X6, –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç (–ø–æ—á—Ç–∏) –≤—Å–µ –æ –≤–Ω—É—Ç—Ä–∏–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–Ω–∫–æ—Å—Ç—è—Ö. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
            )
        ],
        "feedback_df": pd.DataFrame(columns=["user_query", "server_response", "rating"])
    }
    st.session_state["current_chat_id"] = chat_id


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ FastAPI —Å–µ—Ä–≤–µ—Ä
def send_request(prompt):
    try:
        response = requests.get(f"http://95.182.121.46:8080/query?query={prompt}")
        if response.status_code == 200:
            return response.json()["response"]
        else:
            return f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä–∞. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏
def handle_feedback(chat_id, user_query, server_response, rating):
    feedback_data = pd.DataFrame({"user_query": [user_query], "server_response": [server_response], "rating": [rating]})
    st.session_state["chats"][chat_id]["feedback_df"] = pd.concat(
        [st.session_state["chats"][chat_id]["feedback_df"], feedback_data], ignore_index=True)


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤
st.sidebar.header("–ß–∞—Ç—ã")

# –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if st.sidebar.button("–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞"):
    st.stop()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
if st.sidebar.button("–ù–æ–≤—ã–π —á–∞—Ç"):
    create_new_chat()

# –í—ã–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
st.sidebar.markdown("### –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", unsafe_allow_html=True)
active_chats = list(st.session_state["chats"].keys())
if active_chats:
    for chat_id in active_chats:
        chat_name = chat_id[:8]  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 8 —Å–∏–º–≤–æ–ª–æ–≤ ID –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        chat_title = f"**{chat_name}**"
        col1, col2 = st.sidebar.columns([2, 1])  # –†–∞—Å—à–∏—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —á–∞—Ç–æ–≤
        with col1:
            if st.button(chat_title, key=f"active_chat_{chat_id}", use_container_width=True):
                st.session_state["current_chat_id"] = chat_id
        with col2:
            if st.button("–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", key=f"close_chat_{chat_id}", use_container_width=True):
                st.session_state["archived_chats"][chat_id] = st.session_state["chats"].pop(chat_id)
                st.session_state["current_chat_id"] = None
                st.experimental_rerun()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
st.sidebar.markdown("<br>" * 3, unsafe_allow_html=True)

# –í—ã–≤–æ–¥ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
st.sidebar.markdown("### –ê—Ä—Ö–∏–≤–Ω—ã–µ —á–∞—Ç—ã", unsafe_allow_html=True)
archived_chats = list(st.session_state["archived_chats"].keys())
if archived_chats:
    for chat_id in archived_chats:
        chat_name = chat_id[:8]  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 8 —Å–∏–º–≤–æ–ª–æ–≤ ID –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        chat_title = f"**{chat_name}**"
        if st.sidebar.button(chat_title, key=f"archived_chat_{chat_id}", use_container_width=True):
            st.session_state["current_chat_id"] = chat_id

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
if not st.session_state.get("current_chat_id"):
    st.markdown(
        "<h1 style='text-align: center; font-size: 36px;'>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</h1>",
        unsafe_allow_html=True
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
if st.session_state["current_chat_id"]:
    chat = st.session_state["chats"].get(st.session_state["current_chat_id"],
                                         st.session_state["archived_chats"].get(st.session_state["current_chat_id"]))

    st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ X5", divider="green")

    # –í—ã–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    for idx, message in enumerate(chat["messages"]):
        if message.role == "user":
            with st.chat_message(message.role, avatar="ü¶ñ"):
                st.markdown(message.content)
        else:
            with st.chat_message(message.role, avatar="üñ•Ô∏è"):
                st.markdown(message.content)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if "current_feedback_state" in st.session_state and st.session_state["current_feedback_state"]:
        col1, col2 = st.columns(2)
        with col1:
            like_button = st.button("üëç", key=f"like_feedback_{st.session_state['current_feedback_state']['timestamp']}",
                                    use_container_width=True)
        with col2:
            dislike_button = st.button("üëé",
                                       key=f"dislike_feedback_{st.session_state['current_feedback_state']['timestamp']}",
                                       use_container_width=True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
        if like_button:
            handle_feedback(st.session_state["current_chat_id"],
                            st.session_state["current_feedback_state"]["user_query"],
                            st.session_state["current_feedback_state"]["server_response"], "like")
            st.session_state["current_feedback_state"] = None
            st.experimental_rerun()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫

        if dislike_button:
            handle_feedback(st.session_state["current_chat_id"],
                            st.session_state["current_feedback_state"]["user_query"],
                            st.session_state["current_feedback_state"]["server_response"], "dislike")
            st.session_state["current_feedback_state"] = None
            st.experimental_rerun()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_is_archived = st.session_state["current_chat_id"] in st.session_state["archived_chats"]

    # –ï—Å–ª–∏ —á–∞—Ç –≤ –∞—Ä—Ö–∏–≤–µ, —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
    input_disabled = chat_is_archived

    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", disabled=input_disabled):
        message = ChatMessage(role="user", content=prompt)
        chat["messages"].append(message)

        with st.chat_message("user", avatar="ü¶ñ"):
            st.markdown(message.content)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å FastAPI —Å–µ—Ä–≤–µ—Ä–∞
        with st.chat_message("assistant", avatar="üñ•Ô∏è"):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É —Ç–µ–∫—Å—Ç–∞
            server_answer = send_request(prompt)
            response_text = server_answer
            output_text = ""
            progress_text = st.empty()

            for char in response_text:
                output_text += char
                progress_text.markdown(f"{output_text} ...")
                time.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è "–ø–µ—á–∞—Ç–∞–Ω–∏—è"
            st.markdown(output_text)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            chat["messages"].append(ChatMessage(role="assistant", content=output_text))
            st.session_state["current_feedback_state"] = {
                "user_query": prompt,
                "server_response": response_text,
                "timestamp": pd.Timestamp.now().timestamp()  # –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            st.experimental_rerun()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞


    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    def save_feedback():
        for chat_id, chat_data in st.session_state["chats"].items():
            if not chat_data["feedback_df"].empty:
                file_path = f"feedback_{chat_id}.csv"
                chat_data["feedback_df"].to_csv(file_path, index=False, encoding='utf-16')

        for chat_id, chat_data in st.session_state["archived_chats"].items():
            if not chat_data["feedback_df"].empty:
                file_path = f"feedback_{chat_id}.csv"
                chat_data["feedback_df"].to_csv(file_path, index=False, encoding='utf-16')


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ —Å–µ—Å—Å–∏—è
    if st.session_state.get("current_feedback_state") is None and chat["messages"]:
        save_feedback()
